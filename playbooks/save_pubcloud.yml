---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    region: "{{ rax_region }}"
    script_path: "{{ lookup('env', 'WORKSPACE') }}/rpc-gating/scripts"
    os_client_config_file: "{{ lookup('env', 'OS_CLIENT_CONFIG_FILE') }}"
    image_name: "{{ lookup('env', 'SAVE_IMAGE_NAME') }}"
    cloud_name: "public_cloud"
  tasks:

    - name: Fail when no value is provided for SAVE_IMAGE_NAME
      fail:
       msg: "The SAVE_IMAGE_NAME environment variable must be set."
      when: image_name == ""

    - name: Get instance info
      os_server_facts:
        server: "{{ instance_name }}"
        region_name: "{{ region }}"
        cloud: "{{ cloud_name }}"

    - name: Confirm one instance matching name
      fail:
        msg: "The number of servers matching the instance name is not 1."
      when: openstack_servers | length != 1

    - set_fact:
        instance: "{{ openstack_servers[0] }}"

    - name: Execute public cloud instance cleanup script
      script: "{{ lookup('env', 'WORKSPACE') }}/rpc-gating/scripts/rax_instance_clean.sh"
      delegate_to: "{{ instance.accessIPv4 }}"

    # This task is executed asynchronously so that
    # Ansible does not wait for completion before
    # continuing.
    - name: Shut down cloud instance
      shell: >
        sleep 2 && /sbin/shutdown -h now
      async: 1
      poll: 0
      ignore_errors: true
      delegate_to: "{{ instance.accessIPv4 }}"

    # In order to ensure the integrity of the instance image
    # we wait 30 seconds to give it a chance to complete shut
    # down before executing the save.
    - name: Pause for a minute to allow the instance to shut down
      pause:
        minutes: 1

    - name: Save public cloud instance
      command: >-
        {{ script_path }}/create_cloud_image.py --cloudregion {{ instance.region }}
                                                --serveruuid {{ instance.id }}
                                                --imagename '{{ image_name }}'
                                                --cloudname {{ cloud_name }}
      environment:
        OS_CLIENT_CONFIG_FILE: "{{ os_client_config_file }}"
