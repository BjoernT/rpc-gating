- project:
    name: 'Multi-Node-AIO-Jobs'
    series:
      - mitaka:
          branch: mitaka-13.1
          SERIES_USER_VARS: |
            tempest_test_sets: 'scenario defcore api heat_api smoke'
      - newton140:
          branch: newton-14.0
          SERIES_USER_VARS: |
            tempest_test_sets: 'all'
      - newton141:
          branch: newton-14.1
          SERIES_USER_VARS: |
            tempest_test_sets: 'all'
      - master:
          branch: master
          SERIES_USER_VARS: |
            tempest_test_sets: 'all'
    image:
      - xenial:
          DEFAULT_IMAGE: "16.04.2"
      - trusty:
          DEFAULT_IMAGE: "14.04.5"
    action:
      - deploy:
          ACTION_STAGES: >-
            Prepare MaaS,
            Setup MaaS,
            Verify MaaS,
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Holland
    trigger:
      - periodic:
          CRON: "H H(0-8) * * 1-5"
      - post-merge:
          CRON: ""
    exclude:
      # Xenial builds are run for newton and above
      # as it is not supported distro before newton.
      - series: mitaka
        image: xenial
      # Trusty builds are not executed for master
      # as Trusty is not a supported distro for
      # Ocata onwards.
      - series: master
        image: trusty
    jobs:
      - 'OnMetal-Multi-Node-AIO_{series}-{image}-{action}-{trigger}'
      - 'OnMetal-Multi-Node-AIO-Merge-Trigger_{series}'

- job-template:
    name: 'OnMetal-Multi-Node-AIO-Merge-Trigger_{series}'
    project-type: workflow
    properties:
      - build-discarder:
          days-to-keep: 7
      - rpc-openstack-github
    concurrent: true
    triggers:
      - github
    dsl: |
      common.shared_slave(){{
        stage('OnMetal Multi-Node AIO') {{
          git branch: "{branch}", url: "https://github.com/rcbops/rpc-openstack"
          if("{series}" == "mitaka"){{
            build job: 'OnMetal-Multi-Node-AIO_mitaka-trusty-deploy-post-merge'
          }} else {{
            build job: 'OnMetal-Multi-Node-AIO_{series}-xenial-deploy-post-merge'
          }}
        }} // stage
        stage('Push to rpc-openstack'){{
         sshagent (credentials:['rpc-jenkins-svc-github-ssh-key']){{
           sh """
             mkdir -p ~/.ssh
             ssh-keyscan github.com >> ~/.ssh/known_hosts
             git push -f git@github.com:rcbops/rpc-openstack HEAD:omna-approved-{series}
             """
         }} // sshagent
        }} // stage
      }} // node

- job-template:
    name: 'OnMetal-Multi-Node-AIO_{series}-{image}-{action}-{trigger}'
    project-type: workflow
    # DEFAULTS
    DEFAULT_STAGES: >-
      Allocate Resources,
      Connect Slave,
      Prepare Multi-Node AIO,
      Prepare RPC Configs,
      Deploy RPC w/ Script,
      Cleanup,
      Destroy Slave
    ACTION_STAGES: ""
    TRIGGER_STAGES: ""
    DEPLOY_SUPPORT_ROLE: "yes"
    DEPLOY_MAAS: "no"
    properties:
      - build-discarder:
          days-to-keep: 7
      - rpc-openstack-github
    concurrent: true
    triggers:
      - timed: "{CRON}"
    parameters:
      - kibana_selenium_params:
          KIBANA_SELENIUM_BRANCH: "{branch}"
      - rpc_gating_params
      - instance_params:
          IMAGE: "OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)"
          FLAVOR: "onmetal-io1"
          REGION: "IAD"
      - rpc_repo_params:
          RPC_BRANCH: "{branch}"
      - osa_ops_params:
          DEFAULT_IMAGE: "{DEFAULT_IMAGE}"
          DATA_DISK_DEVICE: "sdb"
      - rpc_deploy_params:
          DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
          DEPLOY_CEPH: "{DEPLOY_CEPH}"
          DEPLOY_ELK: "{DEPLOY_ELK}"
          DEPLOY_SUPPORT_ROLE: "{DEPLOY_SUPPORT_ROLE}"
          DEPLOY_MAAS: "{DEPLOY_MAAS}"
          USER_VARS: |
            {CONTEXT_USER_VARS}
            {SERIES_USER_VARS}
            {TRIGGER_USER_VARS}
      - string:
          name: STAGES
          default: "{DEFAULT_STAGES}, {ACTION_STAGES}, {TRIGGER_STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Multi-Node AIO
              Prepare RPC Configs
              Deploy RPC w/ Script
              Prepare MaaS
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Horizon Selenium
              Horizon Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave

    dsl: |
      common.shared_slave(){{
        try {{
          instance_name = common.gen_instance_name()
          deploy_node = null
          pubcloud.getPubCloudSlave(instance_name: instance_name)

          // Adds maas token and url to environment
          // without adding another level of nesting
          maas.add_maas_env_vars()
          common.use_node(instance_name){{
            multi_node_aio_prepare.prepare()
            instance_ip = sh(script: "ip route get 1 | awk '{{print \$NF;exit}}'", returnStdout: true)
          }} // public cloud node

          deploy_node = "${{instance_name}}-deploy-vm"
          multi_node_aio_prepare.connect_deploy_node(deploy_node, instance_ip)

          common.use_node(deploy_node){{
            deploy.deploy_sh(
              environment_vars: [
                "DEPLOY_HAPROXY=yes",
                "DEPLOY_TEMPEST=no",
                "DEPLOY_AIO=no",
                ]
            ) // deploy_sh
            parallel(
              "maas": {{
                maas.prepare(instance_name: instance_name)
                maas.deploy()
                maas.verify()
              }},
              "tempest": {{
                tempest.tempest()
              }},
              "horizon": {{
                horizon.horizon_integration()
              }},
              "kibana": {{
                kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
              }},
              "holland": {{
                holland.holland()
              }}
            ) // parallel
          }}// deploy node on public cloud node
        }} catch (e){{
            currentBuild.result = 'FAILURE'
            if("{trigger}" == "post-merge"){{
              common.create_jira_issue()
            }}
            throw e
        }} finally {{
            pubcloud.delPubCloudSlave(instance_name: instance_name)
            maas.entity_cleanup(instance_name: instance_name)
            if(deploy_node != null){{
              ssh_slave.destroy(deploy_node)
            }}
            common.delete_workspace()
        }}
      }} // cit node
