- project:
    name: 'RPC-AIO-Jobs'
    # Note: branch is the branch for periodics to build
    #       branches is the branch pattern to match for PR Jobs.
    series:
      - kilo:
          branch: kilo
          branches: "kilo.*"
          STAGES: >-
            Allocate Resources,
            Connect Slave,
            Prepare Deployment,
            Deploy RPC w/ Script,
            Setup MaaS,
            Install Tempest,
            Tempest Tests,
            Holland,
            Cleanup,
            Destroy Slave
      - liberty:
          branch: liberty-12.2
          branches: "liberty-.*"
      - mitaka:
          branch: mitaka-13.1
          branches: "mitaka-.*"
      - newton140:
          branch: newton-14.0
          branches: "newton-14.0.*"
      - newton141:
          branch: newton-14.1
          branches: "newton-14.1.*"
      - master:
          branch: master
          branches: "master"
    context:
      - swift
      - ceph:
          DEPLOY_SWIFT: "no"
          DEPLOY_CEPH: "yes"
          CONTEXT_USER_VARS: |
            ceph_stable_release: "hammer"
            cinder_cinder_conf_overrides:
                DEFAULT:
                    default_volume_type: ceph
            cinder_service_backup_driver: cinder.backup.drivers.ceph
            tempest_service_available_swift: false
      - majorupgrade:
          STAGES: >-
            Allocate Resources,
            Connect Slave,
            Prepare Deployment,
            Deploy RPC w/ Script,
            Setup MaaS,
            Verify MaaS,
            Install Tempest,
            Tempest Tests,
            Prepare Kibana Selenium,
            Kibana Tests,
            Holland,
            Major Upgrade,
            Cleanup,
            Destroy Slave
          UPGRADE_FROM_REF: "liberty-12.2"
      - leapfrogupgrade:
          STAGES: >-
            Allocate Resources,
            Connect Slave,
            Prepare Deployment,
            Deploy RPC w/ Script,
            Leapfrog Upgrade,
            Cleanup,
            Destroy Slave
          UPGRADE_FROM_REF: "kilo"
      - xenial:
          IMAGE: "Ubuntu 16.04.2 LTS prepared for RPC deployment"

    # NOTE: Hugh tested this and found that ztrigger overrides series and
    #       trigger doesn't, which is odd because both trigger and ztrigger
    #       sort after series.
    ztrigger:
      - pr:
          CRON: ""
          TRIGGER_USER_VARS: "maas_use_api: false"
      - periodic:
          branches: "do_not_build_on_pr"
          NUM_TO_KEEP: 10
    exclude:
      - series: kilo
        context: majorupgrade
      - series: liberty
        context: majorupgrade
      - series: newton140
        context: majorupgrade
      - series: newton141
        context: majorupgrade
      - series: master
        context: majorupgrade
      # Xenial builds are run for newton and above
      # as it is not supported distro before newton.
      - series: kilo
        context: xenial
      - series: liberty
        context: xenial
      - series: mitaka
        context: xenial
      # Leapfrog upgrades are only run for newton141
      # as the upgrade method is not supported for any
      # other target distro.
      - series: kilo
        context: leapfrogupgrade
      - series: liberty
        context: leapfrogupgrade
      - series: mitaka
        context: leapfrogupgrade
      - series: newton140
        context: leapfrogupgrade
      - series: master
        context: leapfrogupgrade
      # Ceph builds are not run for kilo at this time
      # as ceph deployment is not supported for
      # newton (yet) and the purpose of executing
      # kilo builds is for the leapfrog upgrade tests.
      - series: kilo
        context: ceph
    jobs:
      - 'RPC-AIO_{series}-{context}-{ztrigger}'

- job-template:
    # DEFAULTS
    STAGES: >-
      Allocate Resources,
      Connect Slave,
      Prepare Deployment,
      Deploy RPC w/ Script,
      Setup MaaS,
      Verify MaaS,
      Install Tempest,
      Tempest Tests,
      Prepare Kibana Selenium,
      Kibana Tests,
      Holland,
      Cleanup,
      Destroy Slave
    branch: master
    NUM_TO_KEEP: 30
    IMAGE: "Ubuntu 14.04.5 LTS prepared for RPC deployment"
    # TEMPLATE
    name: 'RPC-AIO_{series}-{context}-{ztrigger}'
    project-type: workflow
    concurrent: true
    properties:
      - build-discarder:
          num-to-keep: "{NUM_TO_KEEP}"
      - rpc-openstack-github
    parameters:
      # See params.yml
      - kibana_selenium_params:
         KIBANA_SELENIUM_BRANCH: "{branch}"
      - rpc_repo_params:
         RPC_BRANCH: "{branch}"
      - rpc_deploy_params:
         DEPLOY_SWIFT: "{DEPLOY_SWIFT}"
         DEPLOY_CEPH: "{DEPLOY_CEPH}"
         DEPLOY_ELK: "{DEPLOY_ELK}"
         USER_VARS: |
           {CONTEXT_USER_VARS}
           {SERIES_USER_VARS}
           {TRIGGER_USER_VARS}
         UPGRADE_FROM_REF: "{UPGRADE_FROM_REF}"
      - rpc_gating_params
      - single_use_slave_params:
         IMAGE: "{IMAGE}"
         FLAVOR: "{FLAVOR}"
         REGION: "{REGION}"
      - tempest_params:
         TEMPEST_TEST_SETS: "scenario defcore"
         RUN_TEMPEST_OPTS: "--serial"
         TESTR_OPTS: ""
      - string:
          name: STAGES
          default: "{STAGES}"
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Prepare Deployment
              Deploy RPC w/ Script
              Setup MaaS
              Verify MaaS
              Install Tempest
              Tempest Tests
              Prepare Kibana Selenium
              Kibana Tests
              Holland (test holland mysql backup)
              Major Upgrade
              Leapfrog Upgrade
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
              Destroy Slave
    triggers:
      - timed: "{CRON}"
      - github-pull-request:
          org-list:
            - rcbops
          github-hooks: true
          trigger-phrase: '.*recheck_cit_all.*|.*recheck_cit_{context}.*'
          only-trigger-phrase: false
          white-list-target-branches:
            - "{branches}"
          auth-id: "github_account_rpc_jenkins_svc"
          status-context: 'CIT/{context}'
          cancel-builds-on-update: true

    dsl: |
      // CIT Slave node
      currentBuild.result = 'SUCCESS'
      timeout(time: 8, unit: 'HOURS'){{
        node() {{
          try {{
            dir("rpc-gating") {{
              git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
              common = load 'pipeline_steps/common.groovy'
              pubcloud = load 'pipeline_steps/pubcloud.groovy'
              aio_prepare = load 'pipeline_steps/aio_prepare.groovy'
              deploy = load 'pipeline_steps/deploy.groovy'
              tempest = load 'pipeline_steps/tempest.groovy'
              holland = load 'pipeline_steps/holland.groovy'
              maas = load 'pipeline_steps/maas.groovy'
              kibana = load 'pipeline_steps/kibana.groovy'
            }}
            // We need to checkout the rpc-openstack repo on the CIT Slave
            // so that we can check whether the patch is a docs-only patch
            // before allocating resources unnecessarily.
            if (env.STAGES.contains("Major Upgrade") || env.STAGES.contains("Leapfrog Upgrade")) {{
              common.prepareRpcGit(env.UPGRADE_FROM_REF, env.WORKSPACE)
            }} else {{
              common.prepareRpcGit("auto", env.WORKSPACE)
            }} // if
            if(common.is_doc_update_pr("${{env.WORKSPACE}}/rpc-openstack")){{
              return
            }}
            pubcloud.runonpubcloud {{
              // try within pubcloud node so we can archive archive_artifacts
              // after a failure, before the node is cleaned up.
              try {{
                environment_vars = [
                  "DEPLOY_HAPROXY=yes",
                  "DEPLOY_AIO=no",
                  "DEPLOY_MAAS=no",
                  "DEPLOY_TEMPEST=no",
                  "DEPLOY_SWIFT=${{DEPLOY_SWIFT}}",
                  "DEPLOY_CEPH=${{DEPLOY_CEPH}}",
                  "DEPLOY_ELK=${{DEPLOY_ELK}}",
                  ]
                aio_prepare.prepare()
                deploy.deploy_sh(environment_vars: environment_vars)
                deploy.addChecksumRule()
                maas.deploy()
                maas.verify()
                tempest.tempest()
                kibana_branch = env.UPGRADE_FROM_REF ?: env.KIBANA_SELENIUM_BRANCH
                kibana.kibana(kibana_branch)
                holland.holland()
                if (env.STAGES.contains("Major Upgrade")) {{
                  deploy.upgrade_major(environment_vars: environment_vars)
                  deploy.addChecksumRule()
                  maas.deploy()
                  maas.verify()
                  tempest.tempest()
                  kibana.kibana(env.KIBANA_SELENIUM_BRANCH)
                  holland.holland()
                }} else if (env.STAGES.contains("Leapfrog Upgrade")) {{
                  deploy.upgrade_leapfrog(environment_vars: environment_vars)
                }}
              }} catch (e) {{
                print(e)
                currentBuild.result = 'FAILURE'
                throw e
              }} finally {{
                common.archive_artifacts()
                common.safe_jira_comment("${{currentBuild.result}}: [${{env.BUILD_TAG}}|${{env.BUILD_URL}}]")
              }}
            }} //pubcloud slave
          }} finally {{
            common.delete_workspace()
          }}
        }} // cit node
      }} // timeout
